{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeHolder","handleChange","className","type","placeholder","onChange","Card","props","alt","src","monster","id","name","CardList","monsters","map","key","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACb,uBAAOC,UAAU,SAASC,KAAK,SAASC,YAAaJ,EAAaK,SAAUJ,KCA3EK,G,YAAO,SAACC,GAAD,OAChB,sBAAKL,UAAU,iBAAf,UACI,qBAAKM,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,4BAAIJ,EAAMG,QAAQE,YCDbC,EAAW,SAACN,GACvB,OAAO,qBAAKL,UAAU,YAAf,SACHK,EAAMO,SAASC,KAAK,SAAAL,GAAO,OAAI,cAAC,EAAD,CAAwBA,QAASA,GAAtBA,EAAQM,WCmCzCC,G,wDApCb,aAAe,IAAD,8BACZ,gBAOFhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXT,SAAU,GACVM,YAAa,IAJH,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEL,SAAUc,S,oBAG/C,WAAU,IAAD,EAEyBC,KAAKN,MAA7BT,EAFD,EAECA,SAASM,EAFV,EAEUA,YACXU,EAAmBhB,EAASiB,QAAQ,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAGrG,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACAF,YAAY,kBACZC,aAAc4B,KAAK5B,eACnB,cAAC,EAAD,CAAUa,SAAUgB,W,GA/BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3d379da0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './search-box.styles.css'\r\nexport const SearchBox = ({placeHolder,handleChange}) => (     \r\n            <input className=\"search\" type=\"search\" placeholder={placeHolder} onChange={handleChange}/>     \r\n    )\r\n","import React from 'react';\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/> \r\n        <p>{props.monster.name}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from '../card/card.component'\r\n\r\n\r\nexport const CardList = (props) => {\r\n  return <div className=\"card-list\">{\r\n      props.monsters.map( monster => <Card key={monster.key} monster={monster}/>)\r\n  }</div>;\r\n};\r\n","import { Component } from \"react\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value })\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ monsters: users }));\r\n  }\r\n\r\n  render() {\r\n\r\n    const { monsters,searchField} = this.state;\r\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n   \r\n    return (\r\n      <div className=\"App\">\r\n        <h1> Monsters Rolodex </h1>\r\n        <SearchBox \r\n        placeHolder='search monsters'\r\n        handleChange={this.handleChange} /> \r\n        <CardList monsters={filteredMonsters} />       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}